"""
Django settings for guppy project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta

from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "LOCAL")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS: list = []


# Application definition

INSTALLED_APPS = [
    # Native Django libraries
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party packages
    "anymail",
    "corsheaders",
    "crispy_forms",
    "django_celery_results",
    "django_extensions",
    "django_reflinks",
    "django_user_agents",
    "honeypot",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_jwt",
    "rest_framework_jwt.blacklist",
    "ckeditor",
    "ckeditor_uploader",
    "adminsortable2",
    # Guppy apps
    "accounts",
    "advertisers",
    "emails",
    "faqs",
    "guppy",
    "search",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_reflinks.middleware.AnonymousReferralMiddleware",
    "django_reflinks.middleware.ReferralLinkMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "accounts.middlewares.ip_tracker.IpTrackerMiddleware",
]

ROOT_URLCONF = "guppy.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "accounts.context_processors.extra_context",
                "advertisers.context_processors.extra_context",
            ],
        },
    },
]

WSGI_APPLICATION = "guppy.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "accounts.authentications.CsrfExemptSessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

JWT_AUTH = {
    "JWT_SECRET_KEY": SECRET_KEY,
    "JWT_EXPIRATION_DELTA": timedelta(days=3),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=7),
    "JWT_ALGORITHM": "HS256",
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}

CORS_ALLOW_ALL_ORIGINS = True

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("DATABASE_NAME"),
        "USER": os.environ.get("DATABASE_USER"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        }
    },
    "formatters": {
        "verbose": {
            "format": (
                "{levelname} {asctime} {module} "
                "{process:d} {thread:d} {message}"
            ),
            "style": "{",
        },
        "simple": {
            "format": "[{asctime}] {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "filters": ["require_debug_false"],
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "guppy.log",
            "formatter": "simple",
            "maxBytes": 1024 * 1024 * 50,
        },
    },
    "root": {
        "handlers": ["file"],
        "level": "INFO",
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
        "LOCATION": "127.0.0.1:11211",
        "OPTIONS": {"behaviors": {"cas": True}},
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "accounts.UserProfile"

# Celery settings.
CELERY_BROKER_URL = os.environ.get(
    "BROKER_URL", "amqp://guest:guest@127.0.0.1//"
)
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_RESULT_BACKEND = "django-db"

# CKEditor
CKEDITOR_UPLOAD_PATH = "uploads/"

CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": None,
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = BASE_DIR + "/static/"

STATIC_URL = "/static/"

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
)

STATICFILES_DIRS = [
    (
        "node_modules/jquery",
        os.path.join(BASE_DIR, "frontend", "node_modules", "jquery"),
    ),
    (
        "node_modules/bootstrap",
        os.path.join(BASE_DIR, "frontend", "node_modules", "bootstrap"),
    ),
    (
        "node_modules/bootstrap-icons",
        os.path.join(BASE_DIR, "frontend", "node_modules", "bootstrap-icons"),
    ),
    (
        "node_modules/sentry",
        os.path.join(BASE_DIR, "frontend", "node_modules", "@sentry"),
    ),
    ("css", BASE_DIR + "/frontend/css/"),
    ("js", BASE_DIR + "/frontend/js/"),
    ("assets/images", BASE_DIR + "/frontend/assets/images/"),
]

STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")

HONEYPOT_FIELD_NAME = "guppy"

MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

BASE_URL = "http://localhost:8000"
LOGIN_URL = "/login/"
INTERNAL_IPS = ("127.0.0.1", "localhost", "162.243.168.41")
